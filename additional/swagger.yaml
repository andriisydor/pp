openapi: 3.0.1
info:
  title: MusicPlayer Server
  description: 'MusicPlayer Server for creating and sharing your favourites playlists!'
  termsOfService: http://swagger.io/terms/
  contact:
    email: yaryna.beida.knm.2020@lpnu.ua
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: song
    description: Download your own song 
    externalDocs:
      description: Download your own song to the system 
      url: http://swagger.io
  - name: playlist
    description: Create and share your playlists 
    externalDocs:
      description: Change and modify specific playlist
      url: http://swagger.io
  - name: service
    description: Access to your playlists
    externalDocs:
      description: Find out more about specific playlist
      url: http://swagger.io
  - name: user
    description: Operations with user
    externalDocs:
      description: Find out more about our users
      url: http://swagger.io
      
paths:
  /song:
    post:
      tags:
      - song
      summary: Publish new songs in the MusicPlayer Service
      description: Publish your own song  in the MusicPlayer Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
          application/xml:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        200:
          description: Successfully published a new song
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist
        
  /song/{id}:
    get:
      tags:
      - song
      summary: Find a specific song in the MusicPlayer Service
      description: Find a specific song
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied.
          content: {}
        404:
          description: A song with the specified ID was not found
          content: {}
      security:
        - playlist_auth:
          - write:playlist
          - read:playlist
    put:
      tags:
      - song
      summary: Rename a song
      description: Edit a song name
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied.
          content: {}
        404:
          description: A song with the specified ID was not found
          content: {}
      security:
      - api_key: []
        
    delete:
      tags:
      - song
      summary: Delete a song from the MusicPlayer Service
      description: Delete a specific song
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Song not found
          content: {}
      security:
        - api_key: [] 


  /playlist:
    post:
      tags:
      - playlist
      summary: Create a playlist
      description: Creates a new playlist in the MusicPlayer Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        200:
          description: Successfully created a new playlist
        400:
          description: Invalid input
          content: {}
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist
          
  /playlist/{id}:
    get:
      tags:
      - playlist
      summary: Get a playlist
      description: Obtain information about a specific private playlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid ID supplied.
          content: {}
        403:
          description: 'Only owner of this private playlist has access to it'
          content: {}
        404:
          description: A playlist with the specified ID was not found.
          content: {}
      security:
        - playlist_auth:
          - write:playlist
          - read:playlist
    
    put: 
      tags:
      - playlist
      summary: Rename a playlist
      description: Rename a specific private playlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid ID supplied
          content: {}
        403:
          description: 'Only owner of this private playlist has access to it'
          content: {}
        404:
          description: A playlist with the specified ID was not found
          content: {}
      security:
        - playlist_auth:
          - write:playlist
          - read:playlist
       
    delete:
      tags:
      - playlist
      summary: Delete a playlist
      description: Delete a specific playlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: uuid
            example: 4
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Playlist not found
          content: {}
      security:
        - api_key: [] 
    
  /playlist/song/{songId}:            
    put:
      tags:
      - playlist
      summary:  Add a song to a playlist
      description: Add a song to a specific playlist
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied.
          content: {}
        403:
          description: 'The playlist is private. Only its owner can modify a playlist'
          content: {}
        404:
          description: An song with the specified ID was not found.
          content: {}
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist
        
    delete:
      tags:
      - playlist
      summary: Delete a song from a playlist
      description: Delete a song from a specific playlist
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
            application/xml:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Invalid ID supplied.
          content: {}
        403:
          description: 'The playlist is private. Only its owner can modify a playlist'
          content: {}
        404:
          description: An song with the specified ID was not found.
          content: {}
      security:
      - api_key: []

  /service:
    get:
      tags:
      - service
      summary: Shows available playlists
      description: Gets a public playlists
      responses:
        201:
          description: Shows available playlists
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
        403:
          description: 'Not allowed to show private playlists'
          content: {}
        404:
          description: Playlist not found
          content: {}
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist
  
  /service/{playlistId}:      
    get:
      tags:
      - service
      summary: Get a specific playlist
      description: Get a specific playlist
      parameters:
        - in: path
          name: playlistId
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid playlist ID supplied
          content: {}
        403:
          description: 'The playlist is private. You cannot have an acess to a private playlist'
          content: {}
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist 
        
  /service/user/{userId}:      
    get:
      tags:
      - service
      summary: Get all playlists of specific user
      description: Get all playlists of specific user and all public playlists in db
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlist'
        400:
          description: Invalid user ID supplied
          content: {}
      security:
      - playlist_auth:
        - write:playlist
        - read:playlist 
    
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "Created a new user."
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          headers:
            X-Rate-Limit:
              description: Calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
          
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: Successful operation
          content: {}
      security:
        - api_key: []
  
  /user/{id}:      
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: Name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []
      x-codegen-request-body-name: body
    
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
      xml:
        name: User
    Song:
      required:
      - name
      - singerName
      - duration
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'How You Remind Me'
        singer:
          type: string
          example: 'Avril Lavigne'
        album:
          type: string
          example: 'Avril Lavigne'
        duration:
          type: string
          example: '4:06'
      xml:
        name: Song
    Playlist:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        title:
          type: string
          example: 'Jazz Enjoyment'
        songs:
          type: array
          xml:
            name: song
            wrapped: true
          items:
            $ref: '#/components/schemas/Song'
        userId:
          type: integer
          format: int64
        private:
          type: boolean
          description: Private Playlist
      xml:
        name: Playlist

  securitySchemes:
    playlist_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:5000
          scopes:
            write:playlist: modify playlists
            read:playlist: listen to your favourite playlists
    api_key:
      type: apiKey
      name: api_key
      in: header